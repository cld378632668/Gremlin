We construct a plugin X between Gremlin and backendStorage.

1 1         示例语句   
select * from ggraph('g.V().has(''citizenid'', ''428957201706101374'') ');

 

2         函数调用堆栈   
Thread[gremlin一serve-exec一8](suspended)
三chemaTableTree·constructSelectSinglePathSql(
三SchemaTabIeTree.constructSinglepathSql(SqlgGraph,boolea
三SchemaTabIeTree.constructSinglepathSql(SqlgGraph,boolea
三SchemaTableTree.constructsql(LinkedListschemaTableTree
三SqIgsqlExecutor.executeRegularQuery(SqlgGraph,Schema毛
三SqlgCompiledResultlterator<E>.executeRegularQuery()Iine:
三SqlgCompiledResultlterator<e>.hasNextLazy()Iine:121
三SqlgCompiledResultlterator<e>.hasNext()Iine:78
三SqlgGraphstep<S,E>.processNextstart()Ilne:77
三SqlgGraphstep<S,E>(Abstractstep<s,E>).hasNext()Iine:1
三DefaultGraphTraversal<S,E>(DefaultTraversalS,E).hasNe
三IteratorUtils.fill(Iteratort,S)}ine:62
三IteratorUtils.list(lterators)}ine:85
三IteratorUtils.asList(object)Ilne:382
三HttpGremIinEndpointHandIer.lambda$channelRead$l(Timer￡
三222357684.apply(Object)Iine:notavailable
三FunctionUtils.lambda$WrapFunction$o（ThrowingFunction,obj.
三2137945101.apply(Object)line:notavailable
三GremlinExecutor.lambda$eval$0(GremlinExecutor$Lifecycle,


 3  constructSelectSinglePathSql()函数走读   
 
3.1      构造string：singlePathSql   

StringBuilder singlepathsql = new  stringBuilder(''\nSELECr\n\t'');

3.2         获取SchemaTable 

SchemaTableTree firstSchemaTableTree = distinctQueryStack.getFirst();
SchemaTable firstScehmaTable = fisrtSchemaTableTree.getSchemaTable();

3.3      添加index等信息  




3.4      添加targetlist   


其中，生成alias算法是在calculatedAliasId函数中调用rootAliasAndIncrement()函数完成

先调用1513行的printIDFromClauseFor生成了public.V_citizen.ID

然后调用1515行的printFromClauseFor生成了V_citizen其他列，该函数内部调用了calculateAliasPropertyName函数

最后调用columnList的toString方法生成的select targetlist如下：

3.5      添加from   

3.6      添加where条件   

4       finish   




1         示例语句   
select * from ggraph('g.V().has(''citizenid'', ''428957201706101374'') ');

 

[ 编辑本段 ]   [ 回目录 ]2         函数调用堆栈   
计算机生成了可选文字:
，尹下hread[gremlin一serve卜exec一s](suspended)
旧旧旧旧旧旧门日日卜陌――』日日
＿屯“chemaTableTree·cons，『uC,SeleC,"inglepa,h"ql("qlgGraph,i
三SchemaTabIeTree.constructSinglepathSql(SqlgGraph,boolea
三SchemaTabIeTree.constructSinglepathSql(SqlgGraph,boolea
三SchemaTableTree.constructsql(LinkedListschemaTableTree
三SqIgsqlExecutor.executeRegularQuery(SqlgGraph,Schema毛
三SqlgCompiledResultlteratorE.executeRegularQuery()Iine:
三SqlgCompiledResultlteratore.hasNextLazy()Iine:121
三SqlgCompiledResultlteratore.hasNext()Iine:78
三SqlgGraphstepS,E.processNextstart()Ilne:77
三SqlgGraphstepS,E(Abstractsteps,E).hasNext()Iine:1
三DefaultGraphTraversalS,E(DefaultTraversalS,E).hasNe
三IteratorUtils.6}}(Iteratort,S)}ine:62
三IteratorUtils.}ist(lterators)}ine:85
三IteratorUtils.asList(object)Ilne:382
荟HttpGremIinEndpointHandIer.lambda$channelRead$l(Timer￡
三222357684.apply(Object)Iine:notavailable
三Functionutils.lambda$WrapFunction$o（一hrowing阳nction,obj.
三2137945101.apply(Object)Ilne:notavailable
三6remlin〔xecutor.lambda$eval$o(oremlinExecutor$Llfecycle,
竺竺，n八尸．，气，,，一一：，、．:－一。一～‘一。。一：I一‘．一
丙

 

[ 编辑本段 ]   [ 回目录 ]3      constructSelectSinglePathSql()函数走读   
 

[ 编辑本段 ]   [ 回目录 ]3.1      构造string：singlePathSql   
计算机生成了可选文字:
503
StringBuildersinglepathsql=
ne树
stringBuilder(''\nSELECr\n\t''

 

[ 编辑本段 ]   [ 回目录 ]3.2         获取SchemaTable   
计算机生成了可选文字:
804
805
schemaTableTreef:rstschemaTableTree二distinctQuerystack.getFirst
schemaTablefirstschema下able=firstschema丁able下ree.getschema下able

 

[ 编辑本段 ]   [ 回目录 ]3.3      添加index等信息   
计算机生成了可选文字:
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
B22
823
824
825
826
927
828
829
830
831
832
//TheSqlgVertexstep'5Incoming/parentelementIndexand公纽
//dropstepmustnothavetheindexas:tuses'deletefromwhere:n(select…）'or'wi丁日（s任L任cT)o任匕曰E
//thefirstcolumnintheselectmustbetheID.
//As1tsao任L曰任there15noneedforthe'index'toorderon.
if(!dropstep"lastofprevious==null"distinctQuerystack.getFirst().stepType!=STEP--TYpE.6搜月pH--s不‘不
//ifthere15only1incomlngstart/traverserweuseawhereclauseasltsfaster.
if(this.parentidsAndindexes.s:ze()==i){
singlepathsql.append(this.parentidsAndindexes.get(o).get沌ght川；
singlePathsql.append(',as");
singlePathsql.append(sqlgGraph.getsq1Dialect().maybewraplnQoutes(":ndex"));
}elseif(sqlgGraph.getsq飞Dialect().supportsValuesExpression()){
/／也侧反愁级四hereforHZ
if(sqlgGraph.getsq1Dialect().supportsFullValueExpression()){
singlepathsql.append(sqlgGraph.getsq1Dialect().maybewraplnQoutes("index''));
}etse{
slng飞epathsq飞．append(sqlgGraph.getsq1Dialect().maybewraplnQoutes("CZ"));
}
singlePathsq飞．append(',as");
singlepathsql.append(sqlgGraph.getsq1Dialect().maybewraplnQoutes(""index",));
}else{
singlepathsql.append(sqlgGraph.getsq1Dialect().maybe树raplnQoutes("index''));
singlePathsql.append("as");
singlepathsql.append(sqlgGraph.getsq1Dialect().maybewraplnQoutes("index"));
}
singlepathsql.append(“八n\t");
}

 

[ 编辑本段 ]   [ 回目录 ]3.4      添加targetlist   
计算机生成了可选文字:
singlepathsql.append(construct厂ro嗦lause(sqlgaraph,distinctouerystack,tastofprevious,firstofNextstack,
~；一～,．卜．币从户～1。～~～一刁，11、一尸n八阮叭～、小11

 

constructFromClause->constructFromClause

计算机生成了可选文字:
1509
1510
1511
1512
1513
1514
1515
1516
1517
1518
1519
1520
1521
1522
1523
1524
刀Thelastschemal-ableTreeinthe
//Thislastelement'5properties
call
need
{
stackhasnonextschemaTableTree.
tobereturned,:ncludingalllabeledpropertiesforthispath
if(nextschemaTableTree==null
if(!pr:ntedld){
printIDFromclauseFor(lastschemaTableTree,columnList)
}
printFro门ClauseFor(lastschemaTableTree,columnList);
if
(lastschema下ablel-ree.getschema丁able
print石dg盯noutverteXldFromcZauseFor
)．主s任dge丁able()){
(sqlgoraph,f:rstschemaTableTree,lastschemaTableTree,columnL
}
construc从更更乙abeled厂ro门c更ause(distinctQuerystack,columnList)
construct石nut厂romclause(distinctQuerystack,columnList);
}
retUrn
cotumllL:st.tostring();

 

1513行和1515行添加select的targetlist

计算机生成了可选文字:
NSllle
-―匕反一一―」尸―---
l，岁，,columnList,'
气下垫些一止
.drop
卜。sqlgGraph
会AddnewexPresslon
一｛"publ:c',."V--c:t::en,,
V副ue
(id=223)
Linked日ashMapK,v(id=224)
fa{se
SqlgGraph(id=116)
.“工。’'=aliasi,',public"."V--citizen".''birthdate"=aliasZ,''public".''V--c:t:zen".',gender"=al:as3,',publ:c

 

其中，生成alias算法是在calculatedAliasId函数中调用rootAliasAndIncrement()函数完成

计算机生成了可选文字:
1719，·
1720
1721
1722
1723
1724
1725
privateStringcalculatedAliasld(){
Str:ngresult=this.stepDepth＋月Ll月又SEP”朋ro口＋getschemaTable().getschema()＋月L朔s_SEp网朋rop+getsc
Stringalias=rootAI:asAndlncrement();
this.getColumnNameAliasMap().put(result,alias);
this.getAI主ascolumnNameMap().put(alias,result);
returnalias;
}

 

计算机生成了可选文字:
旦Con'o'e鱼Ta'k，竺Sear'h‘·，二Var'a"'e，路巴任xpre"'on'
NameV目ue
卜．
卜0
Schemal-ablel-ree(id=256)
,"o一＆一public一＆一V--cltizen一＆一旧”(Id=296)
",aIlasi''(id=298)

 

先调用1513行的printIDFromClauseFor生成了public.V_citizen.ID

然后调用1515行的printFromClauseFor生成了V_citizen其他列，该函数内部调用了calculateAliasPropertyName函数

 

 

最后调用columnList的toString方法生成的select targetlist如下：

计算机生成了可选文字:
SELECT
11publlc".''v--citizen',.',ID''As"aliasl'',
'"public'".'"V--citizen',.'"birthdate",As"'aliasZ"
'"public',."V--citizen',."gender'"As"alias3'',
11pub1ic',."v--citlzen',."name"AS"allas4",
11public',.',v--citlzen',."clt12enld"AS'"allass''
11public"."V--citlzen".',emall',AS"allas6"

 

 

[ 编辑本段 ]   [ 回目录 ]3.5      添加from   
计算机生成了可选文字:
835
836
837
535
singlepathsql
singlepathsql
singlepathsql
singlepathsql
,'\nFROM\n、t'");
sqlgGraph.getsq1D:alect().maybewraplnQoutes(firstSchemaTab1eTree.getschemaTab1e().
sqlgGraph.getsq1D:alect().maybewraplnQoutes(firstSchemaTab1eTree.getSchemaTab1e().
g〔

 

计算机生成了可选文字:
FROM
11oublic".",VcitiZen"

 

[ 编辑本段 ]   [ 回目录 ]3.6      添加where条件   
计算机生成了可选文字:
954
955
956
957
958
959
960
961
962
//constructthewhereclauseforthehasContalners
for(SchemaTableTreeschemaTableTree:dist主nctQuerystack){
singlePathsql.append(schemaTableTree.towhereClause(sqlgGraph,mutablewhere));
}
//addinthe15nu飞1whereclausefortheoptionalleftJoins
for(SchemaTableTreeschemaTableTree:leftjoinon){
singlepathsql.append(schemaTab1eTree.to0ptiona1LeftJoinwhereC1ause(sqlgGraph,mutablewhere));
}

 

计算机生成了可选文字:
W日ERE
("public".',V--citizen".'"citizenid",=?)

 

[ 编辑本段 ]   [ 回目录 ]4       finish   
计算机生成了可选文字:
FetUFll
singlepathsql.tostring();
一｝｝表姗

 

计算机生成了可选文字:
SELECT
"public''."v--cltlzen".'，工D',As'"allasl",
"pubtic"."V--citizen"".'"birt卜date'"AS'"aliasZ'",
,,public''.',V--citizen".',gender"AS"alias3'",
"public’二”V--citiZen''."name"AS',alias4',,
"public''."V--citiZen''."citizenid',AS',aliass',,
"public''."V--citizen",."email"As"al主as6"
FROM
,'Pubhc''."v--citlzen"
WHERE
("publlc"."V--c:t:zen"."c:t:zen:d"=?)

